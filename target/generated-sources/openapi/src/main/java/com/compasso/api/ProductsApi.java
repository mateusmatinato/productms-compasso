/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.compasso.api;

import java.math.BigDecimal;
import com.compasso.model.Error;
import com.compasso.model.Product;
import com.compasso.model.ProductData;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-04-13T17:10:20.487025-03:00[America/Sao_Paulo]")

@Validated
@Api(value = "products", description = "the products API")
public interface ProductsApi {

    default ProductsApiDelegate getDelegate() {
        return new ProductsApiDelegate() {};
    }

    /**
     * POST /products : Create new product
     *
     * @param productData  (optional)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Create new product", nickname = "createProduct", notes = "", response = Product.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Produto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Product.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class) })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Product> createProduct(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductData productData) {
        return getDelegate().createProduct(productData);
    }


    /**
     * DELETE /products/{id} : Delete product by id
     *
     * @param id The id of the product that needs to be deleted.  (required)
     * @return Ok (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Delete product by id", nickname = "deleteProductById", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Produto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/products/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteProductById(@ApiParam(value = "The id of the product that needs to be deleted. ",required=true) @PathVariable("id") Integer id) {
        return getDelegate().deleteProductById(id);
    }


    /**
     * GET /products/{id} : Get product by id
     *
     * @param id The id of the product that needs to be fetched.  (required)
     * @return Ok (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Get product by id", nickname = "getProductById", notes = "", response = Product.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Produto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Product.class),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/products/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Product> getProductById(@ApiParam(value = "The id of the product that needs to be fetched. ",required=true) @PathVariable("id") Integer id) {
        return getDelegate().getProductById(id);
    }


    /**
     * GET /products : List all products
     *
     * @return Ok (status code 200)
     *         or No Content (status code 204)
     */
    @ApiOperation(value = "List all products", nickname = "listProducts", notes = "", response = Product.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Produto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Product.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "No Content") })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Product>> listProducts() {
        return getDelegate().listProducts();
    }


    /**
     * GET /products/search : List all products with filters
     *
     * @param q Name or description (optional)
     * @param minPrice Minimum price (optional)
     * @param maxPrice Maximum price (optional)
     * @return Ok (status code 200)
     *         or No Content (status code 204)
     */
    @ApiOperation(value = "List all products with filters", nickname = "listProductsFilter", notes = "", response = Product.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Produto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Product.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "No Content") })
    @RequestMapping(value = "/products/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Product>> listProductsFilter(@ApiParam(value = "Name or description") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Minimum price") @Valid @RequestParam(value = "min_price", required = false) BigDecimal minPrice,@ApiParam(value = "Maximum price") @Valid @RequestParam(value = "max_price", required = false) BigDecimal maxPrice) {
        return getDelegate().listProductsFilter(q, minPrice, maxPrice);
    }


    /**
     * PUT /products/{id} : Update product by id
     *
     * @param id The id of the product that needs to be updated.  (required)
     * @param productData  (optional)
     * @return Ok (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Update product by id", nickname = "updateProductById", notes = "", response = Product.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Produto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Product.class),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/products/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Product> updateProductById(@ApiParam(value = "The id of the product that needs to be updated. ",required=true) @PathVariable("id") Integer id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductData productData) {
        return getDelegate().updateProductById(id, productData);
    }

}
