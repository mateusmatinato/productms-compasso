openapi: 3.0.2
info:
  title: Product-MS COMPASSO UOL
  description: "Rest API for Compasso UOL Technical Challenge"
  contact:
    email: mateusmatinato@gmail.com
  version: 1.0.0
externalDocs:
  description: Linkedin
  url: https://linkedin.com/in/mateusmatinato
servers:
  - url: https://localhost:9999/v1
tags:
  - name: Product
    description: CRUD and query Products
    externalDocs:
      description: Technical definition
      url: https://bitbucket.org/RecrutamentoDesafios/desafio-java-springboot/src/master/
paths:
  /products:
    get:
      tags:
        - Produto
      summary: List all products
      operationId: listProducts
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProduct'
        204:
          description: No Content
    post:
      tags:
        - Produto
      summary: Create new product
      operationId: Create product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductData'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/search:
    get:
      tags:
        - Produto
      summary: List all products with filters
      operationId: listProductsFilter
      parameters:
        - in: query
          name: q
          description: 'Name or description'
          required: false
          schema:
            type: string
        - in: query
          name: min_price
          description: 'Minimum price'
          required: false
          schema:
            type: number
        - in: query
          name: max_price
          description: 'Maximum price'
          required: false
          schema:
            type: number
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProduct'
        204:
          description: No Content
  /products/{id}:
    get:
      tags:
        - Produto
      summary: Get product by id
      operationId: getProductById
      parameters:
        - in: path
          name: id
          description: 'The id of the product that needs to be fetched. '
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Not Found
    put:
      tags:
        - Produto
      summary: Update product by id
      operationId: updateProductById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductData'
      parameters:
        - in: path
          name: id
          description: 'The id of the product that needs to be updated. '
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Not Found
    delete:
      tags:
        - Produto
      summary: Delete product by id
      operationId: deleteProductById
      parameters:
        - in: path
          name: id
          description: 'The id of the product that needs to be deleted. '
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
        404:
          description: Not Found
components:
  schemas:
    ProductData:
      type: object
      required:
        - name
        - description
        - price
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
    ListProduct:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: number
          example: 1.54
    Error:
      type: object
      properties:
        status_code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: "Bad Request"
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
security:
  - basicAuth: []